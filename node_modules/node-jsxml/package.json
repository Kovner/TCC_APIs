{
  "name": "node-jsxml",
  "version": "0.6.0",
  "description": "an XML parser for javascript and node.js",
  "keywords": [
    "xml",
    "parser"
  ],
  "main": "./src/jsxml.js",
  "engines": {
    "node": ">=0.1.9"
  },
  "author": {
    "name": "colorhook",
    "email": "colorhook@gmail.com"
  },
  "maintainers": [
    {
      "name": "colorhook",
      "email": "colorhook@gmail.com",
      "url": "http://colorhook.com"
    }
  ],
  "contributors": [
    {
      "name": "Tiago Freitas",
      "url": "https://github.com/trmfreitas"
    },
    {
      "name": "TimSchlechter",
      "url": "http://github.com/TimSchlechter"
    },
    {
      "name": "baconmania",
      "url": "http://github.com/baconmania"
    },
    {
      "name": "Ron Valstar",
      "url": "http://github.com/Sjeiti"
    }
  ],
  "bugs": {
    "url": "http://github.com/colorhook/jsxml/issues",
    "email": "colorhook@gmail.com"
  },
  "dependencies": {},
  "devDependencies": {
    "yui": ""
  },
  "scripts": {
    "test": "node tests/jsxml-test.js"
  },
  "homepage": "https://github.com/colorhook/jsxml",
  "repository": {
    "type": "git",
    "url": "git://github.com/colorhook/jsxml.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/colorhook/jsxml/blob/master/LICENSE"
    }
  ],
  "readme": "jsxml\n==============\n\njsxml is an XML library for javascript (and node)\n\n单元测试\n------\n[![travis build status](https://api.travis-ci.org/colorhook/jsxml.png)](https://www.travis-ci.org/colorhook/jsxml)\n\n\nInstall by NPM\n--------------\n\n```shell\nnpm install node-jsxml\n```\n\nHow to use?\n------------\nAfter add this library to your project, there will be a global object named jsxml. \n\nin HTML file, import using &lt;script&gt; elements.\n\n```html\n<script src=\"jsxml.js\"></script>\n```\n\nin Node, import using require function.\n\n```javascript\nvar jsxml = require(\"node-jsxml\");\n```\n\nsupport AMD, CMD. Big thanks to [TimSchlechter](https://github.com/TimSchlechter).\n\n```javascript\nseajs.config({\n    alias: {\n        jsxml: '../src/jsxml.js'\n    }\n});\nseajs.use('jsxml', function(jsxml){\n    console.log(jsxml);\n});\n```\n\n```javascript\nvar Namespace = jsxml.Namespace,\n    QName = jsxml.QName,\n    XML = jsxml.XML,\n    XMLList = jsxml.XMLList;\n```\n\nHere you go:\n\n```javascript\nvar xml = new XML(\"<spring>\" + \n\t\t     \"<list id='data'>\" + \n\t\t       \"<element value='jsxml'/>\" +\n\t\t       \"<element value='is'/>\" +\n\t\t       \"<element value='an'/>\" +\n\t\t       \"<element value='xml'/>\" +\n\t\t       \"<element value='parser'/>\" +\n\t\t     \"</list>\" +\n                  \"</spring>\");\n\n//find child nodes\nvar child = xml.child('list');\n\n//print the xml string\nconsole.log(xml.toXMLString());\n\n//modify namespace\nxml.addNamespace(new Namespace(\"ns\", \"http://colorhook.com\"));\nxml.children().addNamespace(new Namespace(\"prefix\", \"uri\"));\nconsole.log(xml.toXMLString());\n\n//find descendants nodes\nvar descendants = xml.descendants('element');\n\n//get all children\nvar children = xml.children();\n//or\nvar children = xml.child('*');\n\n//get text node\nvar text = xml.text();\n\n//get element node\nvar elements = xml.elements();\n\n//get comment node\nvar comments = xml.comments();\n\n//get attribute\nvar attribute = xml.attribute(\"id\");\n\n//get all attributes\nvar attributes = xml.attributes();\n```\n\nAll methods above return an XML object or XMLList object, if you want to get the String type content, you should:\n\n```javascript\nvar xml = new XML(xmlContent);\n\nvar attrValue = xml.attribute('attrName').toString();\n//or\nvar attrValue = xml.attribute('attrName').getValue();\n\nvar childA = xml.child('a').toString();\n//or\nvar childA = xml.child('a').getValue();\n```\n\nIf you want to modify the value, you should call method setValue:\n\n```javascript\nvar xml = new XML(\"your xml string\");\n\nvar attr= xml.attribute('attrName');\nattr.setValue(\"newValue\");\n\nvar childA = xml.child('a');\nchildA.setValue(\"newValue\");\n```\n\nYou can regenerate the XML\n\n```javascript\nvar str = xml.toXMLString();\n```\n\nWhile dealing with a list of childs in XML tree, you should use XMLList API:\n\n```javascript\nvar list = xml.child(\"item\");\nlist.each(function(item, index){\n//item is an XML\n});\n```\n\nAdvanced topics\n----------------\n\nYou can also add, retrieve or remove namespaces:\n\n```javascript\nvar xml = new XML(\"your xml string\");\nvar ns = xml.namespace(\"prefix\");\n\nvar nsNew = new Namespace(\"prefix\", 'uri');\nxml.addNamespace(nsNew);\nxml.removeNamespace(nsNew);\n```\n\nBugs & Feedback\n----------------\n\nPlease feel free report bugs or feature requests.\nYou can send me private message on [github], or send me an email to: [colorhook@gmail.com]\n\nLicense\n-------\n\njsxml is free to use under MIT license. ",
  "readmeFilename": "README.md",
  "_id": "node-jsxml@0.6.0",
  "_shasum": "98473d97ca539f98fa0f0a822d4c3d1cb0666a27",
  "_from": "node-jsxml@0.x",
  "_resolved": "https://registry.npmjs.org/node-jsxml/-/node-jsxml-0.6.0.tgz"
}
